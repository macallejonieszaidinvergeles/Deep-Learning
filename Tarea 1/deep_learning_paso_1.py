# -*- coding: utf-8 -*-
"""DEEP LEARNING Paso 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JBW8ma7SAJcoMALpa3yO7nF73ahQ5GVh
"""

import pandas as pd
from google.colab import drive
from sklearn.model_selection import train_test_split
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image, ImageOps
from tensorflow.keras.preprocessing import image

drive.mount('/content/drive')
!unzip -n '/content/drive/MyDrive/DEEP_LEARNING/DL_flowers.zip'

data_path = "flowers/"
imgs_path = data_path + "images/"
labels_path = data_path + "labels.csv"

labels = pd.read_csv(labels_path,dtype = {"class":"category"})

seed = 0
train_data,test_data = train_test_split(labels,test_size = 0.3,random_state = seed)
dev_data,test_data = train_test_split(test_data,test_size = 0.5,random_state= seed)

train_data = train_data.reset_index(drop = True)
dev_data = dev_data.reset_index(drop = True)
test_data = test_data.reset_index(drop = True)

datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1./255)

classes = ["0","1","2","3","4"]
n_classes = len(classes)
img_width = img_height = 234
x_col = 'image_name'
y_col = 'class'

batch_size = 128
train_generator = datagen.flow_from_dataframe(dataframe = train_data, directory = imgs_path, x_col = x_col, y_col = y_col, class_mode = "categorical", target_size = (img_width, img_height), batch_size= batch_size, classes= classes)
dev_generator = datagen.flow_from_dataframe(dataframe = dev_data, directory = imgs_path, x_col = x_col, y_col = y_col, class_mode = "categorical", target_size = (img_width, img_height), batch_size= batch_size, classes= classes)
test_generator = datagen.flow_from_dataframe(dataframe = test_data, directory = imgs_path, x_col = x_col, y_col = y_col, class_mode = "categorical", target_size = (img_width, img_height), batch_size= batch_size, classes= classes)

base_model = tf.keras.applications.InceptionV3(weights= "imagenet", include_top= False, input_shape = (img_width,img_height,3))

for layer in base_model.layers:
  layer.trainable = False

x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(1024,activation= "relu")(x)

predictions = tf.keras.layers.Dense(n_classes, activation= "softmax")(x)

model = tf.keras.models.Model(inputs = [base_model.input], outputs = [predictions])
model.summary()

model.compile(loss = "categorical_crossentropy",optimizer = tf.keras.optimizers.Adam(learning_rate= 1e-5), metrics = ["accuracy"])

history = model.fit(train_generator, epochs= 10, verbose = 2, steps_per_epoch= len(train_data)/batch_size,validation_data = dev_generator, validation_steps = len(dev_data)/batch_size)

test_loss, test_acc = model.evaluate(test_generator, steps = len(test_data)/batch_size, verbose = 1)
print(f"test_loss: {test_loss:.4f}, test_acc: {test_acc:.4f}")

# predictios = 
predictions = model.predict(test_generator)

predictions[0]

np.argmax(predictions[0])

test_generator[0]

!pip install pillow



img_path = './flowers/images/3407482427_49d5c75291_m.jpg'
image_size = 234


img = image.load_img(img_path, target_size=(image_size, image_size))
plt.imshow(img)
plt.show()
x = image.img_to_array(img)
x /= 255
x = np.expand_dims(x, axis=0)

prediction = model.predict(x)
prediction
classes = np.argmax(prediction, axis = 1)
print(classes)

img_path = './flowers/images/7481215720_73e40f178f_n.jpg'
image_size = 234


img = image.load_img(img_path, target_size=(image_size, image_size))
plt.imshow(img)
plt.show()
x = image.img_to_array(img)
x /= 255
x = np.expand_dims(x, axis=0)

prediction = model.predict(x)
prediction
classes = np.argmax(prediction, axis = 1)
print(classes)

"""classes = ["0","1","2","3","4"]
['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']
"""